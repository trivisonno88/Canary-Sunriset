#include <SoftwareSerial.h>
#include <dht.h>
#define ON true
#define foto A1
#define sun 9
#define ASCII_0 48
#define DHT11_PIN 8 
#define DEBUG true

SoftwareSerial ESP8266(2,3); 
String SSID = "Canaryrl";
String PASSWORD = "password_rete";

int LED = 11;
boolean FAIL_8266 = false;
String strHTML = ",0,0,0";

// variabili globali che modificano la funzione SunSetRise
double luce = 0.00;
double notte =0.00;  
double luceLed;  
double passo = 0.1;    
boolean nightMode;
boolean simulationMode;
//variabile gestione sensore
dht DHT;


void setup() {
// inizializza le porte seriali
  Serial.begin(9600);
  ESP8266.begin(9600);
  
  pinMode(LED, OUTPUT);

  // lampeggio led in fase di setup
  for(int i=0;i<3;i++){
  digitalWrite(LED, HIGH);
  delay(300);
  digitalWrite(LED, LOW);
  delay(200);
  }

  
    Serial.begin(9600);
    ESP8266.begin(9600);
  
    /
    while(!Serial);
    Serial.println("--- Start ---");

    ESP8266.println("AT+RST");
    delay(1000);
    
      Serial.println("Module is ready");
      ESP8266.println("AT+CWMODE=1"); // imposta modalità client
      delay(2000);
      
      //chiude  AP
      Serial.println("Quit AP");
      ESP8266.println("AT+CWQAP"); 
      delay(1000);
      
      clearESP8266SerialBuffer();
      if(cwJoinAP())
      {
        Serial.println("CWJAP Success");
        FAIL_8266 = false;
        
        delay(3000);
        clearESP8266SerialBuffer();
        //prende un indirizzo IP
        sendESP8266Cmdln("AT+CIFSR", 1000);  
        //imposta la connessione multipla
        sendESP8266Cmdln("AT+CIPMUX=1", 1000);
        //inizializza servere su porta 80
        sendESP8266Cmdln("AT+CIPSERVER=1,80",1000);
        //invia una linea di comando;
         
        Serial.println("Server setup finish");

      }
  }
void loop(){
   
  SunSetRise(sun,foto,simulationMode);// lancia la funzione sun set rise ad ogni loop
                                      // ogni iterzione valuta lo stato simulazione e procede
   
  if(ESP8266.available())
  {
    Serial.println("Something received");
    delay(2000);
    if(ESP8266.find("+IPD,"))
    {
      String action;
      
      Serial.println("+IPD, found");
      int connectionId = ESP8266.read()-ASCII_0;
      Serial.println("connectionId: " + String(connectionId));

     ESP8266.find("pin="); // advance cursor to "pin="
     
     int pinNumber = (ESP8266.read()-48)*10; // 
     pinNumber += (ESP8266.read()-48); // ledde l'id ricevuto
    
      all'id è associato lo stato della simulazione da variare
     if (pinNumber==11){
       simulationMode=!simulationMode;
       luce = 0.00;
       notte =0.00;  
           
       nightMode=!ON;
       digitalWrite(pinNumber, !digitalRead(pinNumber)); // toggle pin   
       }
       
       // al pin 12 è associato l'aggiornamento dei parametri ambientali
      if (pinNumber==12){
        DHT.read11(DHT11_PIN);
        int L=analogRead(A0);
        int T=DHT.temperature;
        int U=DHT.humidity;
        strHTML = "<!doctype html><html><head><title>Dati inviati</title></head><body><H1>,";
        strHTML += T ;
        strHTML += ",";
        strHTML += U;
        strHTML +=",";
        strHTML +=L;
        strHTML +="</H1></body></html>";
        delay(1000);
        
        }
    
      
      //invia risposta 
      sendHTTPResponse(connectionId, strHTML);
      
      //Close TCP/UDP
      String cmdCIPCLOSE = "AT+CIPCLOSE="; 
      cmdCIPCLOSE += connectionId;
      sendESP8266Cmdln(cmdCIPCLOSE, 1000);
    }
  }
  delay(100);
  
}

void sendHTTPResponse(int id, String content)
{
  String response;
  response = "HTTP/1.1 200 OK\r\n";
  response += "Content-Type: text/html; charset=UTF-8\r\n"; 
  response += "Content-Length: ";
  response += content.length();
  response += "\r\n";
  response +="Connection: close\r\n\r\n";
  response += content;

  String cmd = "AT+CIPSEND=";
  cmd += id;
  cmd += ",";
  cmd += response.length();
  
  Serial.println("--- AT+CIPSEND ---");
  sendESP8266Cmdln(cmd, 1000);
  
  Serial.println("--- data ---");
  sendESP8266Data(response, 1000);
}

boolean waitOKfromESP8266(int timeout)
{
  do{
    Serial.println("wait OK...");
    delay(1000);
    if(ESP8266.find("OK"))
    {
      return true;
    }

  }while((timeout--)>0);
  return false;
}

boolean cwJoinAP()
{
  String cmd="AT+CWJAP=\"" + SSID + "\",\"" + PASSWORD + "\"";
  ESP8266.println(cmd);
  return waitOKfromESP8266(10);
}

//Send command to ESP8266, assume OK, no error check
//wait some time and display respond
void sendESP8266Cmdln(String cmd, int waitTime)
{
  ESP8266.println(cmd);
  delay(waitTime);
  clearESP8266SerialBuffer();
}

//Basically same as sendESP8266Cmdln()
//But call ESP8266.print() instead of call ESP8266.println()
void sendESP8266Data(String data, int waitTime)
{
  ESP8266.print(data);
  delay(waitTime);
  clearESP8266SerialBuffer();
}

//Clear and display Serial Buffer for ESP8266
void clearESP8266SerialBuffer()
{
  Serial.println("= clearESP8266SerialBuffer() =");
  while (ESP8266.available() > 0) {
    char a = ESP8266.read();
    Serial.write(a);
  }
  Serial.println("==============================");
}

//funzione per il ciclo alba tramonto
void SunSetRise (int pin,int fotoresistenza, boolean mode ){

   double val = ((analogRead(fotoresistenza))/3.8)-80;   //Legge dal canale analogico e scala rispetto al livello luminoso led ntensità_luminsa_max/255=3.8
 if(mode){    
  // set the brightness of pin :
     if(val<=(luce)){
      if(val<0)val=0;
        luceLed=luce-val;
        analogWrite(pin,luceLed);
       }
      else  
      analogWrite(pin,LOW);
     
 if(!nightMode){
    //incremento luminosità
   luce+= passo;
 
    // controllo alba o tramonto
   if (luce <= 0.00 || luce >= 255.00) {
     passo = 0-passo ;
     if(luce<=0.00)
      nightMode=ON;
  }
 }
else{
    notte=notte+passo;
    if(notte>=200){
      
      nightMode=!ON;
      notte=0;
      }
   
    }
 }
 else{
  analogWrite(pin,LOW);
  }
 }
